<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Fabian's Website</title><link href="https://0x0b.de/" rel="alternate"></link><link href="https://0x0b.de/feeds/misc.atom.xml" rel="self"></link><id>https://0x0b.de/</id><updated>2015-01-26T03:20:00+01:00</updated><entry><title>IPython and matplotlib in knitr</title><link href="https://0x0b.de/ipython-and-matplotlib-in-knitr.html" rel="alternate"></link><published>2015-01-26T03:20:00+01:00</published><updated>2015-01-26T03:20:00+01:00</updated><author><name>Fabian Hirschmann</name></author><id>tag:0x0b.de,2015-01-26:ipython-and-matplotlib-in-knitr.html</id><summary type="html">&lt;p&gt;I've been very pleased with knitr when writing dynamic documents for the web
or in LaTeX. As I'm both an R and Python fan, I often found myself wanting
to write Python code in knitr. However, the Python engine in knitr is quite
basic and doesn't support workspace-like environments such that variables
declared in one chunk are available in the next. Plus it doesn't support
matplotlib either.&lt;/p&gt;
&lt;p&gt;Hence, I've started working on a new addon project to knitr named &lt;a href="http://github.com/fhirschmann/knitron"&gt;knitron&lt;/a&gt;
which provides both of these features to the former.&lt;/p&gt;
&lt;p&gt;Knitron works by lazily starting a global IPython kernel the first time a code
chunk gets rendered by knitr and this kernel is reused for all consecutive chunks. This way
all the computation done in any previous chunk is available in the current chunk,
providing R-like behaviour for Python. This basically allows you to do
something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in one chunk and access it in the next:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## 5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All this is achieved by a &lt;a href="https://github.com/fhirschmann/knitron/blob/master/inst/python/knitron.py"&gt;Python wrapper&lt;/a&gt;
that sends the chunk to the existing IPython kernel and returns the output in JSON,
which in turn is then passed back to knitr.&lt;/p&gt;
&lt;p&gt;As far as matplotlib is concerned, the wrapper script checks the pylab state machine
for any plots that the user might have created in a chunk. If this check turns
out positive, the images are written to files and passed back to knitr. This works
for both markdown and latex, as matplotlib supports either output format.&lt;/p&gt;
&lt;p&gt;So, here's a nice plot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="plot of chunk unnamed-chunk-4" src="https://0x0b.de/figure/ipython-in-knitr/unnamed-chunk-4-1.png" /&gt; &lt;/p&gt;
&lt;p&gt;Thus far most of the image functions that knitr provided are supported,
including &lt;code&gt;fig.width&lt;/code&gt; and &lt;code&gt;fig.height&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to install knitron, the only thing to do is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;devtools&lt;span class="p"&gt;)&lt;/span&gt;
install_github&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;knitron&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fhirschmann&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Knitron is not on CRAN yet, but hopefully will be soon! It can be
found on &lt;a href="http://github.com/fhirschmann/knitron"&gt;Github&lt;/a&gt;.&lt;/p&gt;</summary><category term="knitr"></category><category term="ipython"></category><category term="python"></category><category term="matplotlib"></category></entry><entry><title>The Ramer-Douglas-Peucker Algorithm</title><link href="https://0x0b.de/the-ramer-douglas-peucker-algorithm.html" rel="alternate"></link><published>2014-03-03T22:00:00+01:00</published><updated>2014-03-03T22:00:00+01:00</updated><author><name>Fabian Hirschmann</name></author><id>tag:0x0b.de,2014-03-03:the-ramer-douglas-peucker-algorithm.html</id><summary type="html">&lt;p&gt;A little while ago I was working on a project that dealt with the simplification
of rail tracks logged by GPS for the 
&lt;a href="http://www.algo.informatik.tu-darmstadt.de/algorithmics/?L=1"&gt;Algorithm Engineering Group&lt;/a&gt;
of &lt;a href="http://www.tu-darmstadt.de/index.en.jsp"&gt;Technische Universität Darmstadt&lt;/a&gt;
using data provided by &lt;a href="http://www.bahn.de"&gt;Deutsche Bahn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Because the data contained too many coordinates, something had to be done in order
to reduce the number of points the rail tracks were representy by.
The Ramer-Douglas-Peucker algorithm
&lt;a href='#ramer1972iterative' id='ref-ramer1972iterative-1'&gt;Ramer (1972)&lt;/a&gt; and &lt;a href='#douglas1973algorithms' id='ref-douglas1973algorithms-1'&gt;Douglas and Peucker (1973)&lt;/a&gt;,
an algorithm used for reducing the number of points in a curve,
came in quite handy for this task.&lt;/p&gt;
&lt;h2&gt;Visualization&lt;/h2&gt;
&lt;p&gt;In the graph below you can see the algorithm in action. Move and release the slider in order
to see the results of the RDP algorithm applied to the problem at hand.&lt;/p&gt;
&lt;div id="placeholder" style="width:600px;height:400px;align:middle;"&gt;&lt;/div&gt;

&lt;div id="sliderbox" style="width:600px"&gt;&lt;/div&gt;

&lt;div id="slider" style="width:570px;margin-left:15px;margin-top:10px;"&gt;&lt;/div&gt;

&lt;div style="margin-top:10px;margin-left:10px;"&gt;
&lt;b&gt;ε = &lt;/b&gt;&lt;b id="epsilon"&gt;&lt;/b&gt; &lt;br /&gt;
&lt;span style="color:#ba2762;font-weight:bold"&gt;Original # of points: &lt;/span&gt;&lt;b id="c1"&gt;&lt;/b&gt;
&lt;/br&gt;
&lt;span style="color:#659e5f;font-weight:bold"&gt;Simplified # of points: &lt;/span&gt;&lt;b id="c2"&gt;&lt;/b&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Python Implementation&lt;/h2&gt;
&lt;p&gt;I've created a &lt;a href="https://pypi.python.org/pypi/rdp/"&gt;Python implementation of the RDP algorithm&lt;/a&gt;,
which can be installed via pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install rdp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And be used like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rdp&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rdp&lt;/span&gt;

&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rdp&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [[1.0, 1.0], [2.0, 2.0]]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Behind the scenes, this implementation uses &lt;a href="http://www.numpy.org/"&gt;numpy&lt;/a&gt; and hence supports
passing a numpy array as well.&lt;/p&gt;
&lt;p&gt;As far as the Point-Line-Distance in 2-Dimensional space is concerned, linear algebra comes
to the rescue. The implementation uses a custom distance function: If the line is specified
by two points &lt;span class="math"&gt;\(\textbf{x}_1 = (x_1, y_1)\)&lt;/span&gt; and &lt;span class="math"&gt;\(\textbf{x}_2 = (x_2, y_2)\)&lt;/span&gt;, then the distance
from the point &lt;span class="math"&gt;\(\textbf{x}_0 = (x_0, y_0)\)&lt;/span&gt; is given by&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(d = \frac{|\text{det}(\textbf{x}_2 - \textbf{x}_1 \textbf{x}_1 - \textbf{x}_0)|}{|\textbf{x}_2 - \textbf{x}_1|}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(\text{det}(A)\)&lt;/span&gt; denotes a determinant. The derivation of this formula can be found on 
&lt;a href="http://mathworld.wolfram.com/Point-LineDistance2-Dimensional.html"&gt;Wolfram MathWorld&lt;/a&gt;.
This can be translated into python as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pldist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;det&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;])),&lt;/span&gt;
                     &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%&amp;#64;#$&amp;#64;#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%&amp;#64;#$&amp;#64;#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;hr&gt;
&lt;h2&gt;Bibliography&lt;/h2&gt;
&lt;p id='douglas1973algorithms'&gt;David&amp;nbsp;H Douglas and Thomas&amp;nbsp;K Peucker.
Algorithms for the reduction of the number of points required to represent a digitized line or its caricature.
&lt;em&gt;Cartographica: The International Journal for Geographic Information and Geovisualization&lt;/em&gt;, 10(2):112–122, 1973. &lt;a class="cite-backref" href="#ref-douglas1973algorithms-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;p id='ramer1972iterative'&gt;Urs Ramer.
An iterative procedure for the polygonal approximation of plane curves.
&lt;em&gt;Computer Graphics and Image Processing&lt;/em&gt;, 1(3):244–256, 1972. &lt;a class="cite-backref" href="#ref-ramer1972iterative-1" title="Jump back to reference 1"&gt;↩&lt;/a&gt;&lt;/p&gt;
</summary><category term="algorithms"></category><category term="python"></category></entry><entry><title>Persistent remapping of the Caps Lock key</title><link href="https://0x0b.de/persistent-remapping-of-the-caps-lock-key.html" rel="alternate"></link><published>2014-01-05T00:23:00+01:00</published><updated>2014-01-05T00:23:00+01:00</updated><author><name>Fabian Hirschmann</name></author><id>tag:0x0b.de,2014-01-05:persistent-remapping-of-the-caps-lock-key.html</id><summary type="html">&lt;p&gt;I have been annoyed by the standard way of (re)mapping the Caps Lock and Compose
key for a very long time. Remapping is usually done using &lt;code&gt;xmodmap&lt;/code&gt;, a tool that
can be used to patch the current keymap in order to make the Caps Lock key behave
like ESC.&lt;/p&gt;
&lt;p&gt;However, this solution will not persist if you need to hotplug USB keyboards,
because the keymap is reset as soon as you plug in your new keyboard. I've seen
some solutions using udev rules that patch in new keymaps after hotplugging keyboards.
They were however problematic and did not always work because the udev event was
sometimes triggered before the device was properly registered as keybord with the X11 subsystem.&lt;/p&gt;
&lt;p&gt;The proper way to fix this behavior is to modify &lt;code&gt;/etc/default/keyboard&lt;/code&gt; and set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;XKBOPTIONS=&amp;quot;compose:rwin,terminate:ctrl_alt_bksp,caps:escape&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above line will do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map the right windows key to Compose&lt;/li&gt;
&lt;li&gt;Allow CTRL+ALT+Backspace to kill the X Server&lt;/li&gt;
&lt;li&gt;Map Caps Lock to ESC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Non-debian users should be able to achieve the same results by modifying their &lt;code&gt;xorg.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Section &amp;quot;InputClass&amp;quot;
    Identifier      &amp;quot;Keyboard Defaults&amp;quot;
    MatchIsKeyboard &amp;quot;yes&amp;quot;
    ...
    Option           &amp;quot;XkbOptions&amp;quot; &amp;quot;compose:rwin,terminate:ctrl_alt_bksp,caps:escape&amp;quot;
EndSection
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="debian"></category><category term="capslock"></category></entry><entry><title>Linux on a T420 utilizing a dock and multiple monitors</title><link href="https://0x0b.de/linux-on-a-t420-utilizing-a-dock-and-multiple-monitors.html" rel="alternate"></link><published>2013-03-11T11:40:00+01:00</published><updated>2013-03-11T11:40:00+01:00</updated><author><name>Fabian Hirschmann</name></author><id>tag:0x0b.de,2013-03-11:linux-on-a-t420-utilizing-a-dock-and-multiple-monitors.html</id><summary type="html">&lt;p&gt;This article is intended to document my efforts to set up (Debian) GNU/Linux
on a Thinkpad T420 (with an nVidia GPU) utilizing a Docking Station which is
connected to two Monitors via DVI. It was written in the hopes that it will
be useful to people having similar setups.&lt;/p&gt;
&lt;p&gt;This setup utilizes the nVidia GPU to the fullest when docked without the
need for hacks like bumblebee.&lt;/p&gt;
&lt;h2&gt;Multi-Monitor Setup (Twinview, Xinerama)&lt;/h2&gt;
&lt;p&gt;The Thinkpad T420 comes in two variants: Variant A comes with a dedicated
nVidia GPU in addition to an Intel GPU, whilst Variant B ships with a Intel
GPU only. The following description &lt;em&gt;only&lt;/em&gt; applies to Variant A.&lt;/p&gt;
&lt;p&gt;When connecting the T420 to a docking station, the nVidia GPU is hardwired
to the two DVI outputs. This comes in handy because we don't need to worry
about rendering on a GPU that is not physically connected to an output,
which essentialy makes hacks like bumblebee superfluous.&lt;/p&gt;
&lt;h3&gt;Configuring Xorg&lt;/h3&gt;
&lt;p&gt;The approach I'm taking here involves having a single &lt;code&gt;xorg.conf&lt;/code&gt; with
multiple layouts, and a small shell script which either picks the right
setup automatically (depending on whether you are docked), or lets you
decide. I found this to be more reasonable than having multiple xorg.conf
files that you'd otherwise have to synchronize each time you change
something. However, splitting the following configure file into several
files and using the include directive should work as well.&lt;/p&gt;
&lt;p&gt;We'll start off with creating a single &lt;code&gt;xorg.conf&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Section &amp;quot;ServerFlags&amp;quot;
    Option         &amp;quot;DefaultServerLayout&amp;quot; &amp;quot;intel&amp;quot;
    Option         &amp;quot;DontZap&amp;quot; &amp;quot;off&amp;quot;
    Option         &amp;quot;BlankTime&amp;quot; &amp;quot;0&amp;quot;
EndSection

### NVidia (Twinview) Configuration STARTS ###

Section &amp;quot;ServerLayout&amp;quot;
    Identifier     &amp;quot;nvidiatwin&amp;quot;
    Screen      0  &amp;quot;nvidiatwin&amp;quot; 0 0
EndSection

Section &amp;quot;Device&amp;quot;
    Identifier     &amp;quot;nvidiatwin&amp;quot;
    Driver         &amp;quot;nvidia&amp;quot;
    VendorName     &amp;quot;NVIDIA Corporation&amp;quot;
    BoardName      &amp;quot;NVS 4200M&amp;quot;
    BusID          &amp;quot;PCI:1:0:0&amp;quot;
    Option         &amp;quot;NoLogo&amp;quot; &amp;quot;1&amp;quot;
    Option         &amp;quot;Coolbits&amp;quot; &amp;quot;1&amp;quot;
EndSection

Section &amp;quot;Screen&amp;quot;
    Identifier     &amp;quot;nvidiatwin&amp;quot;
    Device         &amp;quot;nvidiatwin&amp;quot;
    Monitor        &amp;quot;LG0&amp;quot;
    DefaultDepth    24
    Option         &amp;quot;TwinView&amp;quot; &amp;quot;1&amp;quot;
    Option         &amp;quot;TwinViewXineramaInfoOrder&amp;quot; &amp;quot;DFP-2&amp;quot;
    Option         &amp;quot;metamodes&amp;quot; &amp;quot;DFP-2: nvidia-auto-select +0+0, DFP-3: nvidia-auto-select +1680+0&amp;quot;
    SubSection     &amp;quot;Display&amp;quot;
        Depth       24
    EndSubSection
EndSection

### NVidia (Dual-Screen) Configuration STARTS ###

Section &amp;quot;ServerLayout&amp;quot;
    Identifier     &amp;quot;nvidia&amp;quot;
    Screen      0  &amp;quot;nvidia0&amp;quot; 0 0
    Screen      1  &amp;quot;nvidia1&amp;quot; RightOf &amp;quot;nvidia0&amp;quot;
    Option         &amp;quot;Xinerama&amp;quot; &amp;quot;1&amp;quot;
EndSection

Section &amp;quot;Device&amp;quot;
    Identifier     &amp;quot;nvidia0&amp;quot;
    Driver         &amp;quot;nvidia&amp;quot;
    VendorName     &amp;quot;NVIDIA Corporation&amp;quot;
    BoardName      &amp;quot;NVS 4200M&amp;quot;
    BusID          &amp;quot;PCI:1:0:0&amp;quot;
    Option         &amp;quot;NoLogo&amp;quot; &amp;quot;1&amp;quot;
    Option         &amp;quot;Coolbits&amp;quot; &amp;quot;1&amp;quot;
    Screen         0
EndSection

Section &amp;quot;Device&amp;quot;
    Identifier     &amp;quot;nvidia1&amp;quot;
    Driver         &amp;quot;nvidia&amp;quot;
    VendorName     &amp;quot;NVIDIA Corporation&amp;quot;
    BoardName      &amp;quot;NVS 4200M&amp;quot;
    BusID          &amp;quot;PCI:1:0:0&amp;quot;
    Option         &amp;quot;NoLogo&amp;quot; &amp;quot;1&amp;quot;
    Option         &amp;quot;Coolbits&amp;quot; &amp;quot;1&amp;quot;
    Screen         1
EndSection

Section &amp;quot;Screen&amp;quot;
    Identifier     &amp;quot;nvidia0&amp;quot;
    Device         &amp;quot;nvidia0&amp;quot;
    Monitor        &amp;quot;LG0&amp;quot;
    DefaultDepth    24
    Option         &amp;quot;TwinView&amp;quot; &amp;quot;0&amp;quot;
    Option         &amp;quot;metamodes&amp;quot; &amp;quot;DFP-2: nvidia-auto-select +0+0&amp;quot;
    SubSection     &amp;quot;Display&amp;quot;
        Depth       24
    EndSubSection
EndSection

Section &amp;quot;Screen&amp;quot;
    Identifier     &amp;quot;nvidia1&amp;quot;
    Device         &amp;quot;nvidia1&amp;quot;
    Monitor        &amp;quot;LG1&amp;quot;
    DefaultDepth    24
    Option         &amp;quot;TwinView&amp;quot; &amp;quot;0&amp;quot;
    Option         &amp;quot;TwinViewXineramaInfoOrder&amp;quot; &amp;quot;DFP-2&amp;quot;
    Option         &amp;quot;metamodes&amp;quot; &amp;quot;DFP-3: nvidia-auto-select +0+0&amp;quot;
    Option         &amp;quot;Rotate&amp;quot; &amp;quot;left&amp;quot;
    SubSection     &amp;quot;Display&amp;quot;
        Depth       24
    EndSubSection
EndSection

Section &amp;quot;Monitor&amp;quot;
    Identifier     &amp;quot;LG0&amp;quot;
    VendorName     &amp;quot;Unknown&amp;quot;
    ModelName      &amp;quot;LG Electronics L227W&amp;quot;
    HorizSync       30.0 - 83.0
    VertRefresh     56.0 - 75.0
    Option         &amp;quot;DPMS&amp;quot;
EndSection

Section &amp;quot;Monitor&amp;quot;
    Identifier     &amp;quot;LG0&amp;quot;
    VendorName     &amp;quot;Unknown&amp;quot;
    ModelName      &amp;quot;LG Electronics L227W&amp;quot;
    HorizSync       30.0 - 83.0
    VertRefresh     56.0 - 75.0
    Option         &amp;quot;DPMS&amp;quot;
EndSection


### NVidia Configuration ENDS ###

### Intel Configuration STARTS ###

Section &amp;quot;ServerLayout&amp;quot;
    Identifier     &amp;quot;intel&amp;quot;
    Screen      0  &amp;quot;intel&amp;quot; 0 0
EndSection

Section &amp;quot;Device&amp;quot;
    Identifier     &amp;quot;intel&amp;quot;
    Driver         &amp;quot;intel&amp;quot;
    Option         &amp;quot;XvMC&amp;quot; &amp;quot;true&amp;quot;
    Option         &amp;quot;UseEvents&amp;quot; &amp;quot;true&amp;quot;
    Option         &amp;quot;AccelMethod&amp;quot; &amp;quot;UXA&amp;quot;
    BusID          &amp;quot;PCI:0:2:0&amp;quot;
EndSection

Section &amp;quot;Screen&amp;quot;
    Identifier     &amp;quot;intel&amp;quot;
    Device         &amp;quot;intel&amp;quot;
    Monitor        &amp;quot;INT&amp;quot;
    DefaultDepth    24
    SubSection     &amp;quot;Display&amp;quot;
        Depth       24
    EndSubSection
EndSection

Section &amp;quot;Monitor&amp;quot;
    Identifier     &amp;quot;INT&amp;quot;
    VendorName     &amp;quot;Unknown&amp;quot;
    ModelName      &amp;quot;Internal T420 Monitor&amp;quot;
    HorizSync       30.0 - 83.0
    VertRefresh     56.0 - 75.0
EndSection

### Intel Configuration ENDS ###
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using this configuration file, you can switch between the following three layouts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel card only (&lt;code&gt;intel&lt;/code&gt;): Layout you'd use when you are not connected to a dock&lt;/li&gt;
&lt;li&gt;Twinview (&lt;code&gt;nvidiatwin&lt;/code&gt;): Layout which sets up a single twinview screen spanning both monitors&lt;/li&gt;
&lt;li&gt;Separate screens (&lt;code&gt;nvidia&lt;/code&gt;): Layout with two xinerama-enabled screens&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can now start your Xorg session by executing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;startx -- -layout nvidiatwin -nolisten tcp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please note the difference between dual screens utilizing xinerama and nVidia TwinView.
TwinView is a nvidia-only setup that creates one large desktop you can use to play games
that span both monitors for example. The other setup comprises of two separate screens
with xinerama enabled (so that you can drag a window from one monitor to the other).
The difference becomes obvious when you query the screen size using &lt;code&gt;xrandr&lt;/code&gt;: The
TwinView setup will report one large screen, whilst the other setup will actually report
two screens.&lt;/p&gt;
&lt;p&gt;This setup is however not very user-friendly. I created a little script called
&lt;code&gt;xorg-layout-chooser&lt;/code&gt; using &lt;code&gt;dialog&lt;/code&gt; which automatically detects your current setup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c"&gt;# Default mode when not conntected to a docking station&lt;/span&gt;
&lt;span class="nv"&gt;DEFUALT_LAYOUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;intel&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Default mode when conntected to a docking station&lt;/span&gt;
&lt;span class="nv"&gt;DEFAULT_LAYOUT_DOCKED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nvidia&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Timeout in seconds&lt;/span&gt;
&lt;span class="nv"&gt;TIMEOUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3

&lt;span class="nv"&gt;LAYOUT_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/layout.mode

dialog --clear --timeout &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TIMEOUT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --menu &lt;span class="s2"&gt;&amp;quot;Select xorg layout&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;70&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;auto&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Auto-Detect&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;intel&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Intel&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;nvidiatwin&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nVidia TwinView&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;nvidia&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Separate nVidia Screens&amp;quot;&lt;/span&gt; 2&amp;gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LAYOUT_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; -ne &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LAYOUT_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;auto&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;lsusb &lt;span class="p"&gt;|&lt;/span&gt; grep -q &lt;span class="s2"&gt;&amp;quot;Lenovo ThinkPad Mini Dock&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nv"&gt;LAYOUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DEFAULT_LAYOUT_DOCKED&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nv"&gt;LAYOUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DEFAULT_LAYOUT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;LAYOUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LAYOUT_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LAYOUT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you use your shell rc files to start xorg, in my case &lt;code&gt;~/.zshrc&lt;/code&gt;, you can now
change it to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;tty&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/dev/tty1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    startx -- -layout &lt;span class="sb"&gt;`&lt;/span&gt;xorg-layout-chooser&lt;span class="sb"&gt;`&lt;/span&gt; -nolisten tcp
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a result, you'll be presented the following dialog when logging in on &lt;em&gt;tty1&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Layout chooser dialog" src="/images/xorg-chooser.png" /&gt;&lt;/p&gt;
&lt;h3&gt;OpenGL&lt;/h3&gt;
&lt;p&gt;Still, this setup may not work when OpenGL comes in. This is because, depending
on your distribution, the GLX link will point to the incorrect libraries. On
Debian, you can simply set the links using &lt;code&gt;update-alternatives&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;update-alternatives --set glx /usr/lib/nvidia
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For the Intel card, it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;update-alternatives --set glx /usr/lib/mesa-diverted
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can of course be integrated into the scripts mentioned above, possibly utilizing &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On some distributions that don't provide a sophisticated alternatives system (such
as Arch Linux - last time I checked), you may be unable to switch the GLX libraries,
and the libraries of the driver that was installed last will be used.&lt;/p&gt;</summary><category term="linux"></category><category term="t420"></category><category term="twinview"></category><category term="xinerama"></category></entry><entry><title>SSH and two factor authentication</title><link href="https://0x0b.de/ssh-and-two-factor-authentication.html" rel="alternate"></link><published>2013-02-26T21:28:29+01:00</published><updated>2013-02-26T21:28:29+01:00</updated><author><name>Fabian Hirschmann</name></author><id>tag:0x0b.de,2013-02-26:ssh-and-two-factor-authentication.html</id><summary type="html">&lt;p&gt;Today, when I switched from Google's SMS-based 2-step verification to the 
Android-based version, I discovered that there exists an
&lt;a href="http://code.google.com/p/google-authenticator/"&gt;open-source version&lt;/a&gt; of
Google's HMAC-based One Time Password (HOTP) implementation. Better yet,
it includes a PAM module that can be incorporated into PAM and thus SSH.&lt;/p&gt;
&lt;p&gt;Because I sometimes log into my server from untrusted sources (university
computer pool), I decided to give it a try. It turned out to be quite
straightforward, and now I have to enter a One Time Password (OTP) in
addition to my user password each time I log into my server. This is
however not required when I use public key authentication from home.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;As said, the set up is straightforward. First, besides the usual compiler
toolchain, the following dependencies are required:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apt-get install libpam-dev libqrencode3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, grab google-authenticator from upstream:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://code.google.com/p/google-authenticator/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And install it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd google-authenticator/libpam
make &amp;amp;&amp;amp; make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Edit &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; and set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ChallengeResponseAuthentication yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, activate the authenticator by adding the pam module to the first
line in &lt;code&gt;/etc/pam.d/sshd&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;auth required pam_google_authenticator.so nullok
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Activation&lt;/h2&gt;
&lt;p&gt;You can now activate 2-step verification by executing &lt;code&gt;google-authenticator&lt;/code&gt;,
which should yield something like this (this is not the key I'm actually using):&lt;/p&gt;
&lt;p&gt;&lt;img alt="command result" src="/images/gar.png" /&gt;&lt;/p&gt;
&lt;p&gt;You can now scan the QR-Code produced by &lt;code&gt;google-authenticator&lt;/code&gt; using the
&lt;a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;amp;hl=en"&gt;Android App&lt;/a&gt;.
When you now try to log into your server, the prompt will look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nl"&gt;t420&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fabian&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="n"&gt;fabian&lt;/span&gt;&lt;span class="mh"&gt;@0x0b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;de&lt;/span&gt;
&lt;span class="n"&gt;Verification&lt;/span&gt; &lt;span class="nl"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At which point you can bring up the app that will look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="android app" src="/images/2sapp.png" /&gt;&lt;/p&gt;</summary><category term="android"></category><category term="security"></category><category term="linux"></category></entry><entry><title>Full-screen flash with multiple monitors</title><link href="https://0x0b.de/full-screen-flash-with-multiple-monitors.html" rel="alternate"></link><published>2013-01-13T00:36:00+01:00</published><updated>2013-01-13T00:36:00+01:00</updated><author><name>Fabian Hirschmann</name></author><id>tag:0x0b.de,2013-01-13:full-screen-flash-with-multiple-monitors.html</id><summary type="html">&lt;p&gt;Users of multiple monitors on GNU/Linux usually stumble upon the issue that Adobe
Flash will leave full-screen when another window receives keyboard or mouse input.
This behavior, which seems to be deliberate, is specifically disappointing when you
want to work on one monitor and watch a flash video on the other.&lt;/p&gt;
&lt;h2&gt;The workaround&lt;/h2&gt;
&lt;p&gt;The "workaround" here is to break this behavior in Adobe Flash on purpose. Internally,
Flash uses the &lt;code&gt;_NET_ACTIVE_WINDOW&lt;/code&gt; property. This read-only property is set by the
window manager and is made up of the window ID of the currently active window or None if no window has the focus.&lt;/p&gt;
&lt;p&gt;First, we need to figure out where the plugin was installed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;find /usr/lib -name &lt;span class="s1"&gt;&amp;#39;libflashplayer.so&amp;#39;&lt;/span&gt;
/usr/lib/flashplugin-nonfree/libflashplayer.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second, we simply rename the property &lt;code&gt;_NET_ACTIVE_WINDOW&lt;/code&gt; in &lt;code&gt;libflashplayer.so&lt;/code&gt; to
&lt;code&gt;_XET_ACTIVE_WINDOW&lt;/code&gt;. On Debian, the command would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;perl -pi -e &lt;span class="s2"&gt;&amp;quot;s/_NET_ACTIVE_WINDOW/_XET_ACTIVE_WINDOW/&amp;quot;&lt;/span&gt; /usr/lib/flashplugin-nonfree/libflashplayer.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, this can be done in one command also:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;find /usr/lib -name &lt;span class="s1"&gt;&amp;#39;libflashplayer.so&amp;#39;&lt;/span&gt; -exec perl -pi -e &lt;span class="s2"&gt;&amp;quot;s/_NET_ACTIVE_WINDOW/_XET_ACTIVE_WINDOW/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please note that if you happen to use Google Chrome/Chromium, you'll need to disable chrome's
internal flash plugin.&lt;/p&gt;</summary><category term="flash"></category><category term="linux"></category></entry><entry><title>Thinkpad T420 Temperature-Multiplier Analysis</title><link href="https://0x0b.de/thinkpad-t420-temperature-multiplier-analysis.html" rel="alternate"></link><published>2012-12-22T16:48:00+01:00</published><updated>2012-12-22T16:48:00+01:00</updated><author><name>Fabian Hirschmann</name></author><id>tag:0x0b.de,2012-12-22:thinkpad-t420-temperature-multiplier-analysis.html</id><summary type="html">&lt;p&gt;I recently ran into the problem that games would not run fluently on my Thinkpad
T420 with an nVidia NVS 4200M. While I'm not exactly a gamer, I do like to play
causally every two or three months. What bothered me was that even games that
don't require much computing and graphic power tend to have frequent "hiccups".&lt;/p&gt;
&lt;p&gt;What I call "hiccups" are short freezes of at most four seconds. When I started
researching the issue, it took me a while to pinpoint the exact cause of this.
The T420 features a i5-2520M CPU which is equipped with
&lt;a href="http://www.intel.com/content/www/us/en/architecture-and-technology/turbo-boost/turbo-boost-technology.html"&gt;Intel Turbo Boost&lt;/a&gt;
which basically means the CPU will run above the base operating frequency when
the operating system requests the highest performance state (P0). I have seen
frequencies peak at 3.2GHz whereas the base frequency is 2.5GHz.&lt;/p&gt;
&lt;h2&gt;Intel Turbo Boost on Linux&lt;/h2&gt;
&lt;p&gt;The Turbo Boost settings are stored in Machine Specific Registers (MSR) which
can be read from and written to using &lt;code&gt;msr-tools&lt;/code&gt;. On Debian, the tools can be
installed via&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apt-get install msr-tools
modprobe msr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once installed, the status of Turbo Mode can be read (on a T420) by executing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rdmsr 0x1a0 --bitfield 38:38
0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where 0 indicates that TB is enabled. The current multiplier can be queried by issuing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rdmsr 0x198 --decimal --bitfield 15:8
8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please note that &lt;code&gt;/proc/cpuinfo&lt;/code&gt; will not tell you the correct frequency when TB
is enabled, because it will only ever show you the maximum frequency reported, which is 2.5GHz.&lt;/p&gt;
&lt;p&gt;You can disable Turbo Mode on a T420 by calling&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wrmsr 0x1a0 274886623368
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and enable it again by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wrmsr 0x1a0 8716424
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to know more about these registers, I recommend taking a look
at &lt;a href="http://code.google.com/p/i7z/"&gt;i7z&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;T420 under High Load&lt;/h2&gt;
&lt;p&gt;Back to the hiccups. The reason they exist is that the T420 cooling system
is unable to absorb the heat over long periods of time. The following graph
shows the development of the temperature and the clock multiplier with Turbo
Mode and Hyper-Threading enabled while running
&lt;a href="http://weather.ou.edu/~apw/projects/stress/"&gt;stress&lt;/a&gt; with 4 worker threads.&lt;/p&gt;
&lt;p&gt;&lt;img alt="4 Threads, Turbo On, Hyper-Threading on" src="/images/data_c4_t1_h1.png" /&gt;&lt;/p&gt;
&lt;p&gt;The graph shows that the multiplier decreases to 8 when the temperatures hits
the maximum allowed temperature. This is very unfortunate, because in interactive
programs like games, the user will experience stuttering until the multiplier is
increased again.&lt;/p&gt;
&lt;p&gt;It seems to be less of a problem when we stress the CPU with only 1 worker thread,
even though this will raise the multiplier even higher.&lt;/p&gt;
&lt;p&gt;&lt;img alt="1 Threads, Turbo On, Hyper-Threading on" src="/images/data_c1_t1_h1.png" /&gt;&lt;/p&gt;
&lt;p&gt;After turning Turbo Boost off, there are no more sudden multiplier drops:&lt;/p&gt;
&lt;p&gt;&lt;img alt="4 Threads, Turbo Off, Hyper-Threading on" src="/images/data_c4_t0_h1.png" /&gt;&lt;/p&gt;
&lt;p&gt;The tests I conducted are dependent on the ambient temperature -- frequent hiccups
may not be as reproducible in a setting with low ambient temperatures. I conducted
the tests with an ambient temperature of 25.5 °C.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Intel Turbo Boost is supposed to decrease the multiplier in increments and not use
an all-or-nothing approach when thermal limits are reached. Unfortunately, this is
not what happens here.&lt;/p&gt;
&lt;p&gt;Therefore, I recommend disabling Turbo Boost on a T420 with an nVidia NVS 4200M  if
you have real-time computing needs and experience stuttering in games for example.&lt;/p&gt;
&lt;p&gt;If you don't want to go through the trouble of installing msr-tools and setting the
registers, an alternative way of setting the maximum frequency is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;echo &amp;quot;for i in 0 1 2 3; do cpufreq-set -c &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="x"&gt; -g ondemand -u 2.50GHz; done&amp;quot; &amp;gt;&amp;gt; /etc/rc.local&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;on Debian.&lt;/p&gt;</summary><category term="linux"></category><category term="t420"></category></entry></feed>